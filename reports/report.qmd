---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-oc-davee>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_df(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select 
    `Long Name`,  `Region`
from 
    world_bank_data.wdi_country
where
    `Region` is null
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
DROP TABLE IF EXISTS peopleskills;
DROP TABLE IF EXISTS peopleroles;
DROP TABLE IF EXISTS people;
DROP TABLE IF EXISTS skills;
DROP TABLE IF EXISTS roles;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as
SELECT * 
from world_bank_data.wdi_country
where region is not null
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  wdi_country
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select
  `Region`
from
  wdi_country
group by 
  `Region`
order by 
  `Region`
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select
  `Region`, count(*)
from
  wdi_country
group by 
  `Region`
order by 
  `Region`
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select
  `Long Name`, `Region`
from
  wdi_country
where 
  `Region`='North America'
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select 
  `Region`, `Short Name`, `Long Name`
from
  wdi_country
where 
  `Short Name`='Qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select 
  `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, `Region`
from 
  wdi_country
where
  `2-alpha code`<>`WB-2 code`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select 
  `Income Group`, count(*) as count
from 
  wdi_country
group by
  `Income Group`
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`
FROM wdi_country
WHERE `Income Group` is Null
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'High income'
WHERE `Short Name` = 'Venezuela';
commit; 
""")

```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
SELECT `Short Name`, `Income Group`
FROM wdi_country
WHERE `Short Name` = 'Venezuela'
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT 
    `Region`,
    `Income Group`,
    COUNT(*) AS no_of_countries
FROM 
    wdi_country
GROUP BY 
    `Region`, 
    `Income Group`
ORDER BY 
    Region ASC,
    `Income Group` ASC
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT 
    `Region`,
    SUM(CASE WHEN `Income Group` = 'High income' THEN country_count ELSE 0 END) AS High,
    SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN country_count ELSE 0 END) AS Upper_middle,
    SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN country_count ELSE 0 END) AS Lower_middle,
    SUM(CASE WHEN `Income Group` = 'Low income' THEN country_count ELSE 0 END) AS Low,
    SUM(CASE WHEN `Income Group` IS NULL OR `Income Group` NOT IN (
            'High income', 'Upper middle income', 'Lower middle income', 'Low income'
        ) THEN country_count ELSE 0 END) AS Other,
    SUM(country_count) AS Row_Total
FROM (
    SELECT 
        `Region`,
        `Income Group`,
        COUNT(*) AS country_count
    FROM 
        wdi_country
    GROUP BY 
        `Region`, 
        `Income Group`
) AS subquery
GROUP BY 
    `Region`
ORDER BY 
    `Region`;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
SELECT 
    COUNT(*) AS low_income_count,
    `Region`,
    'Low income' AS income_group
FROM 
    wdi_country
WHERE 
    `Income Group` = 'Low income'
GROUP BY 
    `Region`
ORDER BY 
    low_income_count DESC
LIMIT 1;
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT 
    `Country Code`,
    `Short Name`,
    `Region`,
    `Income Group` AS income_category
FROM 
    wdi_country
WHERE 
    `Region` = (SELECT `Region` FROM wdi_country WHERE `Country Code` = 'MHL')
    AND `Income Group` = (SELECT `Income Group` FROM wdi_country WHERE `Country Code` = 'MHL')
    AND `Country Code` <> 'MHL'  
ORDER BY 
    `Short Name` ASC;
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
WITH all_combinations AS (
    SELECT DISTINCT 
        r.`Region`, 
        ig.`Income Group`
    FROM 
        (SELECT DISTINCT `Region` FROM wdi_country) r
    CROSS JOIN 
        (SELECT DISTINCT `Income Group` FROM wdi_country WHERE `Income Group` IS NOT NULL) ig
),
existing_combinations AS (
    SELECT 
        `Region`, 
        `Income Group`, 
        COUNT(*) AS count_countries
    FROM 
        wdi_country
    WHERE 
        `Income Group` IS NOT NULL
    GROUP BY 
        `Region`, 
        `Income Group`
)
SELECT 
    ac.`Region`,
    ac.`Income Group`
FROM 
    all_combinations ac
LEFT JOIN 
    existing_combinations ec ON ac.`Region` = ec.`Region` AND ac.`Income Group` = ec.`Income Group`
WHERE 
    ec.`Region` IS NULL
ORDER BY 
    ac.`Region`, 
    ac.`Income Group`;
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH region_income_counts AS (
    -- Base counts from Task 14
    SELECT 
        `Region`,
        `Income Group` AS income_cat,
        COUNT(*) AS country_count
    FROM 
        wdi_country
    WHERE 
        `Income Group` IS NOT NULL
    GROUP BY 
        `Region`, 
        `Income Group`
),
region_totals AS (
    -- Total countries per region
    SELECT 
        `Region`,
        SUM(country_count) AS region_total
    FROM 
        region_income_counts
    GROUP BY 
        `Region`
),
income_totals AS (
    -- Total countries per income category
    SELECT 
        income_cat,
        SUM(country_count) AS income_total
    FROM 
        region_income_counts
    GROUP BY 
        income_cat
),
global_total AS (
    -- Overall total countries
    SELECT SUM(country_count) AS global_count
    FROM region_income_counts
)
SELECT 
    ric.Region,
    ric.income_cat,
    ric.country_count,
    rt.region_total,
    it.income_total,
    gt.global_count,
    -- Calculate percentage of global total
    ROUND((ric.country_count * 100.0 / gt.global_count), 2) AS pct_of_global,
    -- Calculate percentage within region
    ROUND((ric.country_count * 100.0 / rt.region_total), 2) AS pct_in_region,
    -- Calculate percentage within income category
    ROUND((ric.country_count * 100.0 / it.income_total), 2) AS pct_of_income_group
FROM 
    region_income_counts ric
JOIN 
    region_totals rt ON ric.`Region` = rt.`Region`
JOIN 
    income_totals it ON ric.income_cat = it.income_cat
CROSS JOIN 
    global_total gt
ORDER BY 
    ric.`Region`, 
    ric.income_cat;
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH region_income_counts AS (
    SELECT 
        `Region`,
        `Income Group` AS income_cat,
        COUNT(*) AS country_count
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL
    GROUP BY `Region`, `Income Group`
),
region_totals AS (
    SELECT 
        `Region`,
        SUM(country_count) AS region_total
    FROM region_income_counts
    GROUP BY `Region`
)
SELECT 
    `Region`,
    ROUND(SUM(CASE WHEN income_cat = 'High income' 
              THEN (country_count * 100.0) / region_total ELSE 0 END), 2) AS 'High income pct',
    ROUND(SUM(CASE WHEN income_cat = 'Upper middle income' 
              THEN (country_count * 100.0) / region_total ELSE 0 END), 2) AS 'Upper middle pct',
    ROUND(SUM(CASE WHEN income_cat = 'Lower middle income' 
              THEN (country_count * 100.0) / region_total ELSE 0 END), 2) AS 'Lower middle pct',
    ROUND(SUM(CASE WHEN income_cat = 'Low income' 
              THEN (country_count * 100.0) / region_total ELSE 0 END), 2) AS 'Low income pct',
    ROUND(SUM(CASE WHEN income_cat NOT IN ('High income','Upper middle income',
                                     'Lower middle income','Low income') 
              THEN (country_count * 100.0) / region_total ELSE 0 END), 2) AS 'Other pct',
    SUM(country_count) AS 'Total Countries'
FROM 
    region_income_counts ric
JOIN 
    region_totals rt USING (`Region`)
GROUP BY 
    `Region`
ORDER BY 
    `Region`;
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
WITH income_counts AS (
    SELECT 
        `Income Group` AS income_cat,
        COUNT(*) AS country_count
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL
    GROUP BY `Income Group`
),
global_total AS (
    SELECT SUM(country_count) AS total_countries
    FROM income_counts
)
SELECT 
    income_cat AS 'Income Category',
    country_count AS 'Number of Countries',
    gt.total_countries AS 'Global Total',
    ROUND((country_count * 100.0) / gt.total_countries, 2) AS 'Percentage of Total'
FROM 
    income_counts ic
CROSS JOIN 
    global_total gt
ORDER BY 
    country_count DESC;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

i feel most confident in writing the select statements but i need more practice in CTEs. This assignment gave me an avenue to practice the sql commands and how to use them to pull data an transform it into useful information in order to perform data analysis

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

I made sure i understood what i was retrieving then i figured out how to join the tables together and find the overall table i need for final answer then i input the requirements.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaways about working with SQL for data analysis were the ability to take an already established database and use SQL to dig into it learning about the structure and come up with answers to specific questions.


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

